# HMMM program to recursively compute fibonacci numbers

# Program conventions:
# * r15 always holds the base of the currently executing stack frame
# * main stack frame at 0xFF with baseptr and retptr = 0
# * when a function is called, r1 will hold the returnptr value
# * when a function returns, r1 will hold the return value

############################################
# Init things before starting main
setn r15 127
addn r15 127
storer r0 r15 # set main's retptr
addn r15 1
storer r0 r15 # set main's baseptr
jumpn :main:  # start executing main

############################################
# fib(n)
# Stack Frame structure - 6 bytes
# a       = -5
# b       = -4
# c       = -3
# n       = -2
# retptr  = -1
# baseptr = -0
:fib:
# Finish the stack frame init
## store the returnptr for the caller
copy r14 r15
addn r14 -1
storer r1 r14

# if n<2 then
## load n
copy r14 r15
addn r14 -2
loadr r5 r14
## n<2 ==> (n-2)<0
addn r5 -2
jltzn r5 :fib_return1:
jumpn :fib_skip_true:
#    return 1
:fib_return1:
setn r1 1
jumpn :fib_return:
# endif
:fib_skip_true:
# a = fib(n-1)
## load n and compute n-1
copy r14 r15
addn r14 -2
loadr r5 r14
addn r5 -1
## call fib(n) :: init fib's frame then jump
### set baseptr in new frame
copy r14 r15
addn r14 -6
storer r15 r14
### set n in new frame
copy r14 r15
addn r14 -8
storer r5 r14
### Change which frame is currently executing and jump to the function
addn r15 -6
calln r1 :fib:

## store the return value in a -- r1 will hold the return value by convention
copy r14 r15
addn r14 -5
storer r1 r14

# b = fib(n-2)
## load n and compute n-2
copy r14 r15
addn r14 -2
loadr r5 r14
addn r5 -2
## call fib(n) :: init fib's frame then jump
### set baseptr in new frame
copy r14 r15
addn r14 -6
storer r15 r14
### set n in new frame
copy r14 r15
addn r14 -8
storer r5 r14
### Change which frame is currently executing and jump to the function
addn r15 -6
calln r1 :fib:

## store the return value in b -- r1 will hold the return value by convention
copy r14 r15
addn r14 -4
storer r1 r14
# c = a+b
copy r14 r15
addn r14 -5
loadr r2 r14
add r1 r1 r2
copy r14 r15
addn r14 -3
storer r1 r14
# return c
## load c from memory into the return register
copy r14 r15
addn r14 -3
loadr r1 r14

# Return to the caller
:fib_return:
## load the returnptr
copy r14 r15
addn r14 -1
loadr r13 r14
## Move to the caller's stackframe
loadr r15 r15
## actually return to caller
jumpr r13

############################################
# main
# Stack Frame structure - 3 bytes
# z       = -2
# retptr  = -1
# baseptr = -0
:main:
# call fib(n) :: init fib's frame then jump
## set baseptr in new frame
copy r14 r15
addn r14 -3
storer r15 r14
## set n in new frame
setn r1 5
addn r14 -2
storer r1 r14
## Change which frame is currently executing and jump to the function
addn r15 -3
calln r1 :fib:

# store the return value in z -- r1 will hold the return value by convention
copy r14 r15
addn r14 -2
storer r1 r14

# Declare victory
halt
