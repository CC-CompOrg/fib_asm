# HMMM program to recursively compute fibonacci numbers

# Program conventions:
# * r15 always holds the base of the currently executing stack frame
# * main stack frame at 0xFF with baseptr and retptr = 0

############################################
# Init things before starting main
setn r15 127
addn r15 127
storer r0 r15 # set main's retptr
addn r15 1
storer r0 r15 # set main's baseptr
jumpn :main:  # start executing main

############################################
# fib(n)
# Stack Frame structure - 6 bytes
# a       = -5
# b       = -4
# c       = -3
# n       = -2
# retptr  = -1
# baseptr = -0

############################################
# main
# Stack Frame structure - 3 bytes
# z       = -2
# retptr  = -1
# baseptr = -0
:main:
# call fib(n)
# store the return value in z
# Declare victory
halt
